#ifndef _GMTOOL_GLOBAL_H_
#define _GMTOOL_GLOBAL_H_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include <sqltypes.h>
#include "s_NetGlobal.h"
#include "GLMapList.h"

enum GMTOOL_BASIC
{
	GMTOOL_BASIC_NO		= 0,
	GMTOOL_BASIC_YES	= 1,
	GMTOOL_BASIC_SIZE	= 2,
};

enum USERLEVEL_INDEX
{
	USERLEVEL_INDEX_NORMAL			= 0,
	USERLEVEL_INDEX_GAMEMASTER		= 1,
	USERLEVEL_INDEX_ADMINISTRATOR	= 2,
	USERLEVEL_INDEX_SIZE			= 3,	
};

USERLEVEL_INDEX UserTypeToIndex( EMUSERTYPE emTYPE );
EMUSERTYPE UserIndexToType( USERLEVEL_INDEX emINDEX );


enum MAINPAGE_SETTINGS_TYPE
{
	MAINPAGE_SETTINGS_TYPE_TOOL			= 0,
	MAINPAGE_SETTINGS_TYPE_ITEMPRESET	= 1,
	MAINPAGE_SETTINGS_TYPE_SKILLPRESET	= 2,
	MAINPAGE_SETTINGS_TYPE_SIZE			= 3,	
};

enum USERPAGE_SEARCH_TYPE
{
	USERPAGE_SEARCH_TYPE_USERNAME	= 0,
	USERPAGE_SEARCH_TYPE_USERNUMBER	= 1,
	USERPAGE_SEARCH_TYPE_USEREMAIL	= 2,
	USERPAGE_SEARCH_TYPE_USERGM		= 3,
	USERPAGE_SEARCH_TYPE_ONLINE		= 4,
	USERPAGE_SEARCH_TYPE_SIZE		= 5,
};

enum GMTOOL_USER_STATUS
{
	GMTOOL_USER_STATUS_OFFLINE	= 0,
	GMTOOL_USER_STATUS_ONLINE	= 1,
	GMTOOL_USER_STATUS_SIZE		= 2,
};

enum GMTOOL_USER_LOGINTYPE
{
	GMTOOL_USER_LOGINTYPE_LOGOUT	= 0,
	GMTOOL_USER_LOGINTYPE_LOGIN		= 1,
	GMTOOL_USER_LOGINTYPE_SIZE		= 2,
};

enum CHARPAGE_SEARCH_TYPE
{
	CHARPAGE_SEARCH_TYPE_CHANAME	= 0,
	CHARPAGE_SEARCH_TYPE_CHANUMBER	= 1,
	CHARPAGE_SEARCH_TYPE_USERNUMBER	= 2,
	CHARPAGE_SEARCH_TYPE_ONLINE		= 3,
	CHARPAGE_SEARCH_TYPE_SIZE		= 4,
};


enum EMMAPDATA_SEARCH
{
	EMMAPDATA_SEARCH_MAP_NAME	= 0,
	EMMAPDATA_SEARCH_MAP_MID	= 1,
	EMMAPDATA_SEARCH_MAP_SID	= 2,
	EMMAPDATA_SEARCH_SIZE		= 3,
};

enum EMITEMDATA_SEARCH
{
	EMITEMDATA_SEARCH_NAME	= 0,
	EMITEMDATA_SEARCH_MID	= 1,
	EMITEMDATA_SEARCH_SID	= 2,
	EMITEMDATA_SEARCH_TYPE	= 3,
	EMITEMDATA_SEARCH_SIZE	= 4,
};

enum EMCROWDATA_SEARCH
{
	EMCROWDATA_SEARCH_NAME	= 0,
	EMCROWDATA_SEARCH_MID	= 1,
	EMCROWDATA_SEARCH_SID	= 2,
	EMCROWDATA_SEARCH_SIZE	= 3,
};

enum EMITEMEDIT_TYPE
{
	EMITEMEDIT_TYPE_INVEN_ITEM_EDIT	= 0,
	EMITEMEDIT_TYPE_PUTON_CHAR		= 1,
	EMITEMEDIT_TYPE_PUTON_PET		= 2,
	EMITEMEDIT_TYPE_PUTON_VEHICLE	= 3,
	EMITEMEDIT_TYPE_SIZE			= 4,
};

enum EMSKILLADD_TYPE
{
	EMSKILLADD_TYPE_CHAR	= 0,
	EMSKILLADD_TYPE_PET		= 1,
	EMSKILLADD_TYPE_SIZE	= 2,
};

enum EMSKILLDATA_SEARCH
{
	EMSKILLDATA_SEARCH_NAME	= 0,
	EMSKILLDATA_SEARCH_MID	= 1,
	EMSKILLDATA_SEARCH_SID	= 2,
	EMSKILLDATA_SEARCH_CLASS= 3,
	EMSKILLDATA_SEARCH_PET	= 4,
	EMSKILLDATA_SEARCH_SIZE	= 5,
};


enum EMQUESTDATA_SEARCH
{
	EMQUESTDATA_SEARCH_TITLE	= 0,
	EMQUESTDATA_SEARCH_FILE		= 1,
	EMQUESTDATA_SEARCH_ID		= 2,
	EMQUESTDATA_SEARCH_SIZE		= 3,
};

enum EMSHOPITEM_SEARCH
{
	EMSHOPITEM_SEARCH_ITEMNAME		= 0,
	EMSHOPITEM_SEARCH_PRODUCTNUM	= 1,
	EMSHOPITEM_SEARCH_CATEGORY		= 2,
	EMSHOPITEM_SEARCH_MID			= 3,
	EMSHOPITEM_SEARCH_SID			= 4,
	EMSHOPITEM_SEARCH_SIZE			= 5,
};

enum EMSHOPITEM2_SEARCH
{
	EMSHOPITEM2_SEARCH_ITEMNAME		= 0,
	EMSHOPITEM2_SEARCH_PRODUCTNUM	= 1,
	EMSHOPITEM2_SEARCH_CATEGORY		= 2,
	EMSHOPITEM2_SEARCH_MID			= 3,
	EMSHOPITEM2_SEARCH_SID			= 4,
	EMSHOPITEM2_SEARCH_STOCK		= 5,
	EMSHOPITEM2_SEARCH_PRICE		= 6,
	EMSHOPITEM2_SEARCH_COMMENT		= 7,
	EMSHOPITEM2_SEARCH_SIZE			= 8,
};

enum EMSEARCH_LIMIT
{
	EMSEARCH_LIMIT_NONE	= 0,
	EMSEARCH_LIMIT_10	= 1,
	EMSEARCH_LIMIT_50	= 2,
	EMSEARCH_LIMIT_100	= 3,
	EMSEARCH_LIMIT_500	= 4,
	EMSEARCH_LIMIT_999	= 5,
	EMSEARCH_LIMIT_SIZE	= 6,
};

DWORD	GetSearchLimitNum( EMSEARCH_LIMIT emLIMIT );

enum EMPETPAGE_SEARCH_TYPE
{
	EMPETPAGE_SEARCH_PETNAME	= 0,
	EMPETPAGE_SEARCH_PETID		= 1,
	EMPETPAGE_SEARCH_PETOWNER	= 2,
	EMPETPAGE_SEARCH_CARD_MID	= 3,
	EMPETPAGE_SEARCH_CARD_SID	= 4,
	EMPETPAGE_SEARCH_PETTYPE	= 5,
	EMPETPAGE_SEARCH_SIZE		= 6,
};

enum EMVEHICLEPAGE_SEARCH_TYPE
{
	EMVEHICLEPAGE_SEARCH_NAME			= 0,
	EMVEHICLEPAGE_SEARCH_VEHICLENUM		= 1,
	EMVEHICLEPAGE_SEARCH_VEHICLEOWNER	= 2,
	EMVEHICLEPAGE_SEARCH_MID			= 3,
	EMVEHICLEPAGE_SEARCH_SID			= 4,
	EMVEHICLEPAGE_SEARCH_VEHICLETYPE	= 5,
	EMVEHICLEPAGE_SEARCH_SIZE			= 6
};

/*equipment lock, Juver, 2018/01/15 */
enum EMEQUIPMENT_LOCK_PAGE_SEARCH_TYPE
{
	EMEQUIPMENT_LOCK_PAGE_SEARCH_TYPE_CHANUM	= 0,
	EMEQUIPMENT_LOCK_PAGE_SEARCH_TYPE_CHANAME	= 1,
	EMEQUIPMENT_LOCK_PAGE_SEARCH_TYPE_EPIN		= 2,
	EMEQUIPMENT_LOCK_PAGE_SEARCH_TYPE_SIZE		= 3
};

namespace GMTOOL_GLOBAL
{
	//data
	extern GLMapList gmtoolMapList;

	//functions
	std::string GMToolStringConvertToMD5( const TCHAR* szText, int nMAXLEN );
	BOOL IsBadString( std::string strText );
	BOOL IsBadString2( std::string strText );
	BOOL IsBadString3( std::string strText );
	BOOL IsBadNumber( std::string strText );
	
	void	DataCheckMap( CDialog *pDlg, int nIDM, int nIDS, int nIDN );
	void	DataCheckItem( CDialog *pDlg, int nIDM, int nIDS, int nIDN );
	void	DataCheckSkill( CDialog *pDlg, int nIDM, int nIDS, int nIDN );
	void	DataCheckCrow( CDialog *pDlg, int nIDM, int nIDS, int nIDN );
	void	SkillLevelCheck( WORD& wLevel, SNATIVEID sSkillID );

	//strings
	extern std::string strBasic[GMTOOL_BASIC_SIZE];
	extern std::string strUserLevelIndex[USERLEVEL_INDEX_SIZE];
	extern std::string strMainPageSettingsType[MAINPAGE_SETTINGS_TYPE_SIZE];
	extern std::string strUserPageSearchType[USERPAGE_SEARCH_TYPE_SIZE];
	extern std::string strUserStatus[GMTOOL_USER_STATUS_SIZE];
	extern std::string strUserLoginType[GMTOOL_USER_LOGINTYPE_SIZE];
	extern std::string strCharPageSearchType[CHARPAGE_SEARCH_TYPE_SIZE];
	extern std::string strMapDataSearchType[EMMAPDATA_SEARCH_SIZE];
	extern std::string strItemDataSearchType[EMITEMDATA_SEARCH_SIZE];
	extern std::string strCrowDataSearchType[EMCROWDATA_SEARCH_SIZE];
	extern std::string strSkillDataSearchType[EMSKILLDATA_SEARCH_SIZE];
	extern std::string strQuestDataSearchType[EMQUESTDATA_SEARCH_SIZE];
	extern std::string strShopItemSearch[EMSHOPITEM_SEARCH_SIZE];
	extern std::string strSearchLimit[EMSEARCH_LIMIT_SIZE];
	extern std::string strPetPageSearchType[EMPETPAGE_SEARCH_SIZE];
	extern std::string strVehiclePageSearchType[EMVEHICLEPAGE_SEARCH_SIZE];
	extern std::string strShopItemSearch2[EMSHOPITEM2_SEARCH_SIZE];
	extern std::string strEquipmentLockPageSearchType[EMEQUIPMENT_LOCK_PAGE_SEARCH_TYPE_SIZE]; /*equipment lock, Juver, 2018/01/15 */
};

#endif // _GMTOOL_GLOBAL_H_